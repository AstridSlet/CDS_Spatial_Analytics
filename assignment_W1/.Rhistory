tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Use head() to look at the first few records
head(honeylocust_lim)
# load package
library(tidyverse)
# Create a standard, non-spatial data frame with one column
df <- data.frane(a = 1:3)
# Create a standard, non-spatial data frame with one column
df <- data.frame(a = 1:3)
View(df)
# Add a list column to your data frame
df$b <- list(1:4, 1:5, 1:10)
View(df)
# Look at your data frame with head
head(df)
str(df)
str(df)
# Convert your data frame to a tibble and print on console
df <- as_tibble(df)
# Look at your data frame with head
head(df$b)
df$a[3]
df$b[3]
# This will not work
result <- st_area(parks)
# This will not work
install.packages("lwgeom")
# This will not work
library(lwgeom)
result <- st_area(parks)
result > 30000
result > 30000
result
result > 30000
unclass(result) > val
val <- 30000
unclass(result) > val
print(result)
# Read in the parks shapefile
parks <- read_st("data/parks.sh")
# Read in the parks shapefile
parks <- read_st("data/parks.shp")
# Read in the parks shapefile
parks <- read_sf("data/parks.shp")
# Compute the areas of the parks
areas <- st_area(parks)
hist(areas, xlim = c(0, 200000), breaks = 1000)
big_parks <- parks %>% units(st_area(parks) > 30000)
big_parks <- parks %>% units(st_area(parks)) > 30000)
big_parks <- parks %>% st_area(parks) %>% units() > 30000)
big_parks <- parks %>% st_area(parks) %>% units() %>% > 30000)
# Filter to parks greater than 30000 (square meters)
big_parks <- parks %>% unclass(st_area(parks)) > 30000)
unclass(st_area(parks)) > 30000
# Filter to parks greater than 30000 (square meters)
big_parks <- parks %>% filter(unclass(st_area(parks)) > 30000)
# Plot just the geometry of big_parks
hist(big_parks$geometry)
plot(st_geometry(big_parks))
# Plot the parks object using all defaults
plot(parks)
# Plot just the acres attribute of the parks data
plot(parks["acres"])
# Create a new object of just the parks geometry
parks_geo <- geometry_st(parks)
# Create a new object of just the parks geometry
parks_geo <- st_geometry(parks)
# Plot the geometry of the parks data
plot(parks_geo)
plot(parks["acres"])
parks_geo <- st_geometry(parks)
plot(parks_geo)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Load the raster package
library(raster)
canopy <- read_sf("data/canopy.tif")
canopy <- read_sf("data/canopy.tif")
# Read in the rasters
canopy <- raster("data/canopy.tif")
manhattan <- raster("data/manhattan.tif")
# Get the extent of the canopy object
extent(canopy)
manhattan <- brick("data/manhattan.tif")
extent(canopy)
extent(canopy)
ncell(canopy)
ncell(manhattan)
ncell(canopy)
crs(canopy)
# Get the CRS of the manhattan object
crs(manhattan)
extent(canopy)
# Check if the data is in memory
inMemory(canopy)
# Use head() to peak at the first few records
head(canopy)
vals <- getValues(canopy)
hist(vals)
dim(canopy)
dim(manhattan)
dim(canopy)
dim(canopy)
dim(manhattan)
# Plot the canopy raster (single raster)
plot(canopy)
# Plot the manhattan raster (as a single image for each layer)
plot(manhattan)
plotRGB(manhattan)
plot(canopy)
plotRGB(manhattan)
plot(manhattan)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
# Determine the CRS for the neighborhoods and trees vector objects
st_crs(neighborhoods)
st_crs(trees)
# Assign the CRS to trees
crs_1 <- "+proj=longlat +ellps=WGS84 +no_defs"
st_crs(trees)
# Read in the trees shapefile
trees <- read_sf("data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- read_sf("data/neighborhoods.shp")
# Determine the CRS for the neighborhoods and trees vector objects
st_crs(neighborhoods)
st_crs(trees)
st_crs(neighborhoods)
st_crs(trees)
st_crs(trees) <- crs_1
crs_1 <- "+proj=longlat +ellps=WGS84 +no_defs"
st_crs(trees) <- crs_1
trees <- read_sf("data/trees.shp")
st_crs(trees)
print(st_crs(trees))
trees <- read_sf("data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- read_sf("data/neighborhoods.shp")
# Determine the CRS for the neighborhoods and trees vector objects
st_crs(neighborhoods)
st_crs(trees)
# Assign the CRS to trees
# first make trees and neighborhoods
crs_1 <- "+proj=longlat +ellps=WGS84 +no_defs"
st_crs(trees) <- crs_1
canopy <- raster("data/canopy.tif")
manhattan <- brick("data/manhattan.tif")
#check crs
crs(canopy)
crs(canopy)
crs(canopy)
crs(manhattan)
crs(canopy)
crs(manhattan)
crs_2 <- "+proj=utm +zone=18 +ellps=GRS80 +datum=NAD83 +units=m +no_defs"
crs(manhattan) <- crs_2
crs(manhattan)
crs(manhattan)
#load packages
library(sf, raster)
the_crs <- st_srs(canopy, asText = TRUE)
# Get the CRS from the canopy object
the_crs <- st_crs(canopy, asText = TRUE)
the_crs
canopy_crs <- st_crs(canopy, asText = TRUE)
# Project manhattan to match the CRS of canopy
manhattan_crs <- st_crs(manhattan, crs = ___, method = "ngb")
# Project manhattan to match the CRS of canopy
manhattan_crs <- crs(manhattan, crs = ___, method = "ngb")
# Get the CRS from the canopy object
the_crs <- st_crs(canopy, asText = TRUE)
# Project trees to match the CRS of canopy
trees_crs <- crs(trees, crs = the_crs)
library(sf, raster)
# Get the CRS from the canopy object
the_crs <- st_crs(canopy, asText = TRUE)
# Project trees to match the CRS of canopy
trees_crs <- st_transform(trees, crs = the_crs)
# Project neighborhoods to match the CRS of canopy
neighborhoods_crs <- projectRaster(neighborhoods, crs = the_crs)
trees_crs <- st_transform(trees, crs = the_crs)
neighborhoods_crs <- projectRaster(neighborhoods, crs = the_crs)
neighborhoods_crs <- projectRaster(neighborhoods, crs = the_crs)
neighborhoods_crs <- projectRaster(neighborhoods, crs = the_crs, method = "ngb")
manhattan_crs <- projectRaster(manhattan, crs = the_crs, method = "ngb")
the_crs
library(sf, raster)
?projectRaster()
manhattan_crs <- projectRaster(manhattan, manhattan_crs, crs = the_crs, method = "ngb")
manhattan_crs <- projectRaster(from=manhattan, to=manhattan_crs, crs = the_crs, method = "ngb")
manhattan_crs <- projectRaster(manhattan, crs = the_crs, method = "ngb")
neighborhoods_crs <- projectRaster(neighborhoods, crs = the_crs)
st_crs(trees_crs)
crs(neighborhoods_crs)
neighborhoods_crs <- projectRaster(neighborhoods, crs = the_crs)
crs(neighborhoods_crs)
crs(manhattan_crs)
crs(manhattan_crs)
st_crs(trees_crs)
st_crs(neighborhoods_crs)
# Project trees to match the CRS of canopy
trees_crs <- st_transform(trees, crs = the_crs)
# Project neighborhoods to match the CRS of canopy
neighborhoods_crs <- st_transform(neighborhoods, crs = the_crs)
manhattan_crs <- projectRaster(manhattan, crs = the_crs, method = "ngb")
crs(manhattan_crs)
manhattan_crs <- projectRaster(manhattan, crs = the_crs, method = "ngb")
# Get the CRS from the canopy object
crs(canopy, asText = TRUE)
crs(manhattan, asText = TRUE)
# BOTH ARE PROJECTED
crs(trees)
crs(neighborhoods)
# BOTH ARE NOT PROJECTED ****`+proj=longlat` then your CRS is unprojected.****
# Project trees to match the CRS of canopy
the_crs <- crs(canopy, asText = T)
trees_crs <- st_transform(trees, crs = the_crs)
# Project neighborhoods to match the CRS of canopy
neighborhoods_crs <- st_transform(neighborhoods, crs = the_crs)
# Project manhattan to match the CRS of canopy
manhattan_crs <- projectRaster(manhattan, crs = the_crs, method = "ngb")
# Look at the CRS to see if they match
crs(trees_crs)
crs(neighborhoods_crs)
crs(manhattan_crs)
# Plot canopy and neighborhoods (run both lines together)
# Do you see the neighborhoods?
plot(canopy)
plot(neighborhoods, add = TRUE)
plot(neighborhoods_crs, add = TRUE)
# See if canopy and neighborhoods share a CRS
crs(neighborhoods)
crs(canopy)
the_crs <- crs(canopy, asText = TRUE)
neighborhoods_crs <- st_transform(neighborhoods, crs = the_crs)
plot(canopy)
plot(neighborhoods_crs, add = TRUE)
tm_shape(canopy) +
tm_raster() +
tm_shape(neighborhoods_crs) +
tm_polygons(alpha = 0.5)
# Simply run the tmap code
tm_shape(canopy) +
tm_raster() +
tm_shape(neighborhoods_crs) +
tm_polygons(alpha = 0.5)
install.packages("tmaps")
library(tmaps)
install.packages("tmaps")
install.packages("tmap")
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(dplyr, sf)
# Create a data frame of counts by species
species_counts <- data.frame(trees, species, sort = count())
# Create a data frame of counts by species
species_counts <- count(trees, species, sort = TRUE)
species_counts
# Use head to see if the geometry column is in the data frame
head(species_counts)
# Drop the geometry column
species_no_geometry <- st_set_geometry(species_counts, geometry
head(species_no_geometry)
# Drop the geometry column
species_no_geometry <- st_set_geometry(species_counts, geometry)
# Drop the geometry column
species_no_geometry <- st_set_geometry(species_counts, geometry=NULL)
species_no_geometry <- st_set_geometry(species_counts, geometry=NULL)
head(species_no_geometry)
# Drop the geometry column
species_no_geometry <- st_set_geometry(species_counts, "geometry"=NULL)
# Drop the geometry column
species_no_geometry <- st_set_geometry(species_counts, "geometry"=NULL)
# Drop the geometry column
species_no_geometry <- st_set_geometry(species_counts, "geometry")
# Confirm the geometry column has been dropped
head(species_no_geometry)
species_no_geometry <- st_set_geometry(species_counts, "geometry")
# Confirm the geometry column has been dropped
head(species_no_geometry)
# Drop the geometry column
species_no_geometry <- st_set_geometry(species_counts, geometry)
# Drop the geometry column
species_no_geometry <- st_set_geometry(species_counts, NULL)
# Confirm the geometry column has been dropped
head(species_no_geometry)
# Drop the geometry column
species_no_geometry <- st_set_geometry(species_counts, NULL)
# Confirm the geometry column has been dropped
head(species_no_geometry)
# Read in the trees shapefile
trees <- read_sf("data/trees.shp")
# Read in the neighborhood shapefile
neighborhoods <- read_sf("data/neighborhoods.shp")
boro <- select(neighborhoods, boro_name, county_fip, boro_code)
# Drop the geometry column
boro_no_geometry <- st_set_geometry(boro, NULL)
# Limit to distinct records
boro_distinct <- distinct(boro_no_geometry)
boro_distinct
trees
trees_with_county <- inner_join(trees, boro_distinct, by = c("boroname" = "boro_name"))
# Confirm the new fields county_fip and boro_code exist
head(trees_with_county)
install.packages("pryr")
library(pryr)
plot(st_geometry(neighborhoods), col = "grey")
# Measure the size of the neighborhoods object
object_size(neighborhoods)
?st_cast()
plot(st_geometry(neighborhoods), col = "grey")
pts_neighborhoods <- st_cast(neighborhoods$geometry, "MULTIPOINT")
pts_neighborhoods <- st_cast(neighborhoods$geometry, "MULTIPOINT") # simplify number of points used in layer
cnt_neighborhoods <- sapply(pts_neighborhoods, length)
sum(cnt_neighborhoods)
# Simplify the neighborhoods object
neighborhoods_simple <- st_simplify(neighborhoods,
preserveTopology = TRUE,
dTolerance = 100)
# Measure the size of the neighborhoods_simple object
object_size(neighborhoods_simple)
# Compute the number of vertices in the neighborhoods_simple object
pts_neighborhoods_simple <- st_cast(neighborhoods_simple$geometry, "MULTIPOINT")
cnt_neighborhoods_simple <- sapply(pts_neighborhoods_simple, length)
sum(cnt_neighborhoods_simple)
# Plot the neighborhoods_simple object geometry
plot(st_geometry(neighborhoods_simple), col = "grey")
trees <- read_sf("trees.shp")
# Read in the trees data
trees <- read_sf("data/trees.shp")
trees_sp <- as(trees, Class = "sp")
# Convert to Spatial class
trees_sp <- as(trees, Class = sp)
# Convert to Spatial class
trees_sp <- as(trees, Class = "spatial")
trees_sp <- as(trees, class = "spatial")
trees_sp <- as(trees, class = "Spatial")
trees <- read_sf("data/trees.shp")
trees
trees_sp <- as(trees, class = "Spatial")
# Read in the trees data
trees <- read_sf("data/trees.shp")
# Convert to Spatial class
trees_sp <- as(trees, Class = 'Spatial')
# Confirm conversion, should be "SpatialPointsDataFrame"
str(trees_sp)
# Convert back to sf
trees_sf <- st_as_sf(trees_sp)
# Confirm conversion
str(trees_sf)
# Read in the CSV
trees <- read.csv("trees.csv")
# Read in the CSV
trees <- read.csv("data/trees.csv")
# Convert the data frame to an sf object
trees_sf <- st_as_sf(trees, coords = sf, crs = 4326)
trees_sf <- st_as_sf(trees, coords = sf, crs = 4326)
trees_sf <- st_as_sf(trees, coords = "sf", crs = 4326)
?st_as_sf()
trees_sf <- st_as_sf(trees, coords = SF, crs = 4326)
# Convert the data frame to an sf object
trees_sf <- st_as_sf(trees, coords = 'SF', crs = 4326)
trees_sf <- st_as_sf(trees, coords = "X", "Y", crs = 4326)
trees <- read.csv("data/trees.csv")
# Convert the data frame to an sf object
trees_sf <- st_as_sf(trees, coords = c("X", "Y"), crs = 4326)
# Plot the geometry of the points
plot(st_geometry(trees_sf))
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(knitr)
library(rmdformats)
## Global options
options(max.print="75")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=75)
library(raster)
# Read in the canopy layer
canopy <- read_sf("data/canopy.tif")
# Read in the canopy layer
canopy <- read_sf("data/canopy.tif")
# Read in the canopy layer
canopy <- raster("data/canopy.tif")
# Plot the canopy raster
plot(canopy)
res(canopy)
ncell(canopy)
res(canopy)
?res()
# Aggregate the raster
canopy_small <-aggregate(canopy, fun = mean, fact = 10)
?aggregate()
?aggregate()
# Determine the number of cells in the new raster
___(canopy_small)
?aggregate()
# Aggregate the raster
canopy_small <-aggregate(canopy, fun = hello, fact = 10)
mean
# Plot the new canopy layer
plot(canopy_small)
# Determine the new raster resolution
res(canopy_small)
# Determine the number of cells in the new raster
ncell(canopy_small)
res(canopy_small)
res(canopy)
# Plot the canopy layer to see the values above 100
plot(canopy)
# Set up the matrix
vals <- cbind(100, 300, NA)
vals
canopy_reclass <- reclasssify(canopy, vals>100 = NA)
vals <- cbind(100, 300, NA)
canopy_reclass <- reclasssify(canopy, canopy>vals = NA)
canopy_reclass <- reclassify(canopy, rcl = vals)
plot(canopy_reclass)
plot(canopy)
install.packages("spData")
install.packages("spData")
library(sf)
library(raster)
library(tmap)
library(spData)
library(spDataLarge)
install.packages("spDataLarge")
